[{"/home/bruno/IdeaProjects/sakata-app/src/App.js":"1","/home/bruno/IdeaProjects/sakata-app/src/index.js":"2","/home/bruno/IdeaProjects/sakata-app/src/reportWebVitals.js":"3","/home/bruno/IdeaProjects/sakata-app/src/components/AddBaseCard.js":"4","/home/bruno/IdeaProjects/sakata-app/src/contexts/AddBaseCardsContext.js":"5","/home/bruno/IdeaProjects/sakata-app/src/components/AnimeCharacters.js":"6","/home/bruno/IdeaProjects/sakata-app/src/contexts/AnimeCharactersContext.js":"7","/home/bruno/IdeaProjects/sakata-app/src/contexts/SearchAnimeContext.js":"8","/home/bruno/IdeaProjects/sakata-app/src/components/SearchAnime.js":"9"},{"size":652,"mtime":1608345284454,"results":"10","hashOfConfig":"11"},{"size":547,"mtime":1606673109878,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1606670516565,"results":"13","hashOfConfig":"11"},{"size":11050,"mtime":1607655823467,"results":"14","hashOfConfig":"11"},{"size":11088,"mtime":1608337986138,"results":"15","hashOfConfig":"11"},{"size":2113,"mtime":1608349440485,"results":"16","hashOfConfig":"11"},{"size":1781,"mtime":1608350308849,"results":"17","hashOfConfig":"11"},{"size":872,"mtime":1608350393301,"results":"18","hashOfConfig":"11"},{"size":2198,"mtime":1608345343518,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"105ymdi",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bruno/IdeaProjects/sakata-app/src/App.js",[],"/home/bruno/IdeaProjects/sakata-app/src/index.js",[],["42","43"],"/home/bruno/IdeaProjects/sakata-app/src/reportWebVitals.js",[],["44","45"],"/home/bruno/IdeaProjects/sakata-app/src/components/AddBaseCard.js",["46","47"],"import { Alert, Button, ButtonGroup, Col, Container, FormControl, Image, InputGroup, ListGroup, Row, ToggleButton } from \"react-bootstrap\";\nimport { AddBaseCardContext, AddBaseCardProvider } from \"../contexts/AddBaseCardsContext\";\nimport TemplateSilver from '../resources/sakata-silver.png';\nimport TemplateEpic from '../resources/sakata-epic.png';\nimport TemplateGold from '../resources/sakata-gold.png';\nimport TemplateLegend from '../resources/sakata-legend.png';\nimport { CubeSpinner } from \"react-spinners-kit\";\n\nexport const style = {\n    sakataCard: {\n        position: 'relative',\n        height: '290px',\n        width: '212px'\n    },\n    malId: {\n        position: 'absolute',\n        backgroundColor: '#fff',\n        right: '0',\n        padding: '2px',\n        lineHeight: '0.7',\n        fontSize: '14px',\n        fontFamily: 'Helvetica',\n        fontWeight: 'bold'\n    },\n    overallPower: {\n        position: 'absolute',\n        bottom: '22px',\n        left: '5px',\n        height: '80px',\n        width: '77px',\n        textAlign: 'center',\n        fontSize: '65px',\n        fontFamily: 'Jockey One'\n    },\n    name: {\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        bottom: '0px',\n        left: '95px',\n        fontSize: '24px',\n        fontFamily: 'Yanone Kaffeesatz',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        letterSpacing: '0px',\n        lineHeight: '0.8',\n        width: '111px',\n        height: '69px',\n    },\n    silverFont: {\n        color: '#fff',\n        textShadow: \"0 0 1px #ccc, 0 0 3px #ccc, 0 0 10px #111, 0 0 20px #111\"\n    },\n    goldFont: {\n        color: '#fffbeb',\n        textShadow: \"0 0 1px #fff, 0 0 7px #e6b800, 0 0 12px #e6b800\"\n    },\n    epicFont: {\n        color: '#fff',\n        textShadow: \"0 0 1px #fff, 0 0 3px #ff80ff, 0 0 15px #ff80ff, 0 0 20px #ff80ff\"\n    },\n    legendFont: {\n        color: '#fff',\n        textShadow: \"0 0 1px #fff, 0 0 3px #00e6e6, 0 0 15px #00e6e6, 0 0 20px #00e6e6\"\n    },\n    loaderDiv: {\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column-reverse'\n    },\n    iconDomain: {\n        position: 'absolute',\n        height: '50px',\n        bottom: '5.59rem',\n        left: '0px'\n    },\n    iconClass: {\n        position: 'absolute',\n        height: '50px',\n        bottom: '139px',\n        left: '0px'\n    }\n}\n\nexport const AddBaseCard = () => (\n    <AddBaseCardProvider>\n        <AddBaseCardContext.Consumer>\n            { (context) => (\n                <>\n                    { context.isLoading ? (\n                        <div style={style.loaderDiv}>\n                            <h2>Performing expensive operations xD</h2><br/>\n                            <CubeSpinner size={70} loading={true}/>\n                        </div>\n                    ) : (\n                        <>\n                        <Container>\n                            { context.alert.show && \n                                <Alert variant=\"danger\" \n                                    onClose={() => context.setAlert({show: false, message: ''})} \n                                    dismissible\n                                >\n                                    {context.alert.message}\n                                </Alert>\n                            }\n\n                            <Row>\n                                <Col sm={12} md={6} lg={4}>\n                                    <h1>Card Overview</h1>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col sm={12} md={6} lg={4}>\n\n                                    <Row>\n                                        <ButtonGroup style={{margin: '10px 0'}}>\n                                            <Button onClick={() => (context.handleRarity(1, TemplateSilver, style.silverFont))} variant=\"outline-secondary\">Silver</Button> \n                                            <Button onClick={() => (context.handleRarity(2, TemplateGold, style.goldFont))} variant=\"outline-secondary\">Gold</Button> \n                                            <Button onClick={() => (context.handleRarity(3, TemplateEpic, style.epicFont))} variant=\"outline-secondary\">Epic</Button> \n                                            <Button onClick={() => (context.handleRarity(4, TemplateLegend, style.legendFont))} variant=\"outline-secondary\">Legend</Button>\n                                        </ButtonGroup>\n\n                                        <div style={style.sakataCard} ref={context.sakataCardRef}>\n                                            <img src={context.selectedClass.path} style={style.iconClass}/>\n                                            <img src={context.selectedDomain.path} style={style.iconDomain}/>\n                                            <span style={style.malId}>{context.character.mal_id}</span>\n                                            <Image src={context.rarity.template} style={{\n                                                backgroundImage: `url(${context.picture})`,\n                                                backgroundPosition: 'center',\n                                                backgroundRepeat: 'no-repeat',\n                                                backgroundSize: '82%',\n                                                height: '290px',\n                                            }} />\n                                            <div style={{...context.rarity.fontStyle, ...style.overallPower}}>\n                                                {context.overallPower}\n                                            </div>\n                                            <div style={{...context.rarity.fontStyle, ...style.name}}>\n                                                <span>{context.character.name}</span>\n                                            </div>\n                                        </div>\n\n                                        <ButtonGroup style={{margin: '10px 0'}}>\n                                            <Button variant=\"outline-secondary\" onClick={() => context.generateOverallPower()}>\n                                                Create Card\n                                            </Button>\n                                            <Button variant=\"outline-secondary\" onClick={() => context.generateJpegCard()}>\n                                                Generate Image\n                                            </Button>\n                                        </ButtonGroup>\n                                    \n                                    </Row>\n\n                                    <Row>\n                                        <ButtonGroup toggle vertical>\n                                            {context.classes.map(c => (\n                                                <ToggleButton\n                                                    key={c.value}\n                                                    type=\"radio\"\n                                                    variant=\"outline-secondary\"\n                                                    value={c.value}\n                                                    checked={context.selectedClass.value === c.value}\n                                                    onChange={context.handleClass}\n                                                >\n                                                    {c.name}\n                                                </ToggleButton>\n                                            ))}\n                                        </ButtonGroup>\n\n                                        <ButtonGroup toggle vertical>\n                                            {context.domains.map(g => (\n                                                <ToggleButton\n                                                    key={g.value}\n                                                    type=\"radio\"\n                                                    variant=\"outline-secondary\"\n                                                    value={g.value}\n                                                    checked={context.selectedDomain.value === g.value}\n                                                    onChange={context.handleDomain}\n                                                >\n                                                    {g.name}\n                                                </ToggleButton>\n                                            ))}\n                                        </ButtonGroup>\n                                    </Row>\n                                    \n                                </Col>\n\n                                <Col sm={12} md={6} lg={8}>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>Picture Url</InputGroup.Text>\n                                        </InputGroup.Prepend>  \n                                        <FormControl \n                                            placeholder=\"Url\"\n                                            value={context.picture}\n                                            onChange={context.handlePicture}    \n                                        />\n                                    </InputGroup>\n\n                                    <br/>\n                                    <p>Select valid animes for this character or nothing for a auto generated overall power</p>\n\n                                    <ListGroup as=\"ul\">\n                                        { context.character.animeography.map((anime) => (\n                                            <ListGroup.Item key={anime.mal_id}\n                                                variant={context.selectedAnimes.includes(anime) ? \"primary\" : \"\"}\n                                                style={{cursor: 'pointer'}}\n                                                onClick={() => context.selectAnime(anime)}\n                                            >\n                                                <Image \n                                                    src={anime.image_url} \n                                                    style={{height: '120px', marginRight:'15px'}}\n                                                    thumbnail \n                                                />\n                                                {anime.name}\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n                        </Container>\n                        </>\n                    )}\n                </>\n            )}\n        </AddBaseCardContext.Consumer>\n    </AddBaseCardProvider>\n);","/home/bruno/IdeaProjects/sakata-app/src/contexts/AddBaseCardsContext.js",["48","49"],"import download from 'downloadjs';\nimport * as HtmlToImage from 'html-to-image';\nimport React, { createRef, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { style } from '../components/AddBaseCard';\nimport BeastClass from '../resources/class-beast.png';\nimport FighterClass from '../resources/class-fighter.png';\nimport MachinistClass from '../resources/class-machinist.png';\nimport MagicianClass from '../resources/class-magician.png';\nimport MusicianClass from '../resources/class-musician.png';\nimport RangerClass from '../resources/class-ranger.png';\nimport ScholarClass from '../resources/class-scholar.png';\nimport SupernaturalClass from '../resources/class-supernatural.png';\nimport SupportClass from '../resources/class-support.png';\nimport SwordsmanClass from '../resources/class-swordsman.png';\nimport WorkerClass from '../resources/class-worker.png';\nimport RogueClass from '../resources/class-rogue.png';\nimport ActionDomain from '../resources/domain-action.png';\nimport AdventureDomain from '../resources/domain-adventure.png';\nimport ComedyDomain from '../resources/domain-comedy.png';\nimport MysteryDomain from '../resources/domain-mystery.png';\nimport RomanceDomain from '../resources/domain-romance.png';\nimport SciFiDomain from '../resources/domain-scifi.png';\nimport SliceOfLifeDomain from '../resources/domain-sliceoflife.png';\nimport SportsDomain from '../resources/domain-sports.png';\nimport FantasyDomain from '../resources/domain-fantasy.png';\nimport TemplateSilver from '../resources/sakata-silver.png';\n\nconst classes = [\n    { name: 'Fighter', value: '1' },\n    { name: 'Magician', value: '2' },\n    { name: 'Swordsman', value: '3' },\n    { name: 'Ranger', value: '4' },\n    { name: 'Rogue', value: '5' },\n    { name: 'Support', value: '6' },\n    { name: 'Beast', value: '7' },\n    { name: 'Machinist', value: '8' },\n    { name: 'Supernatural', value: '9' },\n    { name: 'Scholar', value: '10' },\n    { name: 'Worker', value: '11' },\n    { name: 'Musician', value: '12' },\n];\n\nconst domains = [\n    { name: 'Action', value: '1' },\n    { name: 'Adventure', value: '2' },\n    { name: 'Fantasy', value: '3' },\n    { name: 'SciFi', value: '4' },\n    { name: 'Sports', value: '5' },\n    { name: 'Mystery', value: '6' },\n    { name: 'SliceOfLife', value: '7' },\n    { name: 'Comedy', value: '8' },\n    { name: 'Romance', value: '9' },\n]\n\nconst AddBaseCardContext = React.createContext({});\n\nconst AddBaseCardProvider = component => {\n    const sakataCardRef = createRef();\n    const { malId } = useParams();\n    const [character, setCharacter] = useState({});\n    const [selectedAnimes, setSelectedAnimes] = useState([]);\n    const [picture, setPicture] = useState(\"\");\n    const [baseOverallPower, setBaseOverallPower] = useState(0);\n    const [overallPower, setOverallPower] = useState(0);\n    const [selectedClass, setSelectedClass] = useState({});\n    const [selectedDomain, setSelectedDomain] = useState({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [alert, setAlert] = useState({show: false, message: ''});\n    const [rarity, setRarity] = useState({\n        value: 1,\n        template: TemplateSilver,\n        fontStyle: style.silverFont\n    });\n\n    const handlePicture = event => {\n        setPicture(event.target.value)\n    };\n\n    const handleRarity = (value, template, fontStyle) => {\n        setRarity({\n            value: value,\n            template: template,\n            fontStyle: fontStyle\n        });\n    };\n\n    const handleClass = e => {\n        if (e.target.value === '1') {\n            setSelectedClass({path: FighterClass, value: e.target.value})\n        }\n        if (e.target.value === '2') {\n            setSelectedClass({path: MagicianClass, value: e.target.value})\n        }\n        if (e.target.value === '3') {\n            setSelectedClass({path: SwordsmanClass, value: e.target.value})\n        }\n        if (e.target.value === '4') {\n            setSelectedClass({path: RangerClass, value: e.target.value})\n        }\n        if (e.target.value === '5') {\n            setSelectedClass({path: RogueClass, value: e.target.value})\n        }\n        if (e.target.value === '6') {\n            setSelectedClass({path: SupportClass, value: e.target.value})\n        }\n        if (e.target.value === '7') {\n            setSelectedClass({path: BeastClass, value: e.target.value})\n        }\n        if (e.target.value === '8') {\n            setSelectedClass({path: MachinistClass, value: e.target.value})\n        }\n        if (e.target.value === '9') {\n            setSelectedClass({path: SupernaturalClass, value: e.target.value})\n        }\n        if (e.target.value === '10') {\n            setSelectedClass({path: ScholarClass, value: e.target.value})\n        }\n        if (e.target.value === '11') {\n            setSelectedClass({path: WorkerClass, value: e.target.value})\n        }\n        if (e.target.value === '12') {\n            setSelectedClass({path: MusicianClass, value: e.target.value})\n        }\n    }\n\n    const handleDomain  = e => {\n        if (e.target.value === '1') {\n            setSelectedDomain({path: ActionDomain, value: e.target.value})\n        }\n        if (e.target.value === '2') {\n            setSelectedDomain({path: AdventureDomain, value: e.target.value})\n        }\n        if (e.target.value === '3') {\n            setSelectedDomain({path: FantasyDomain, value: e.target.value})\n        }\n        if (e.target.value === '4') {\n            setSelectedDomain({path: SciFiDomain, value: e.target.value})\n        }\n        if (e.target.value === '5') {\n            setSelectedDomain({path: SportsDomain, value: e.target.value})\n        }\n        if (e.target.value === '6') {\n            setSelectedDomain({path: MysteryDomain, value: e.target.value})\n        }\n        if (e.target.value === '7') {\n            setSelectedDomain({path: SliceOfLifeDomain, value: e.target.value})\n        }\n        if (e.target.value === '8') {\n            setSelectedDomain({path: ComedyDomain, value: e.target.value})\n        }\n        if (e.target.value === '9') {\n            setSelectedDomain({path: RomanceDomain, value: e.target.value})\n        }\n    }\n\n    const selectAnime = anime => {\n        let animes = Array.from(selectedAnimes);\n        let i = animes.findIndex(a => a.mal_id === anime.mal_id);\n        if (i < 0) {\n            animes.push(anime);\n        } else {\n            animes.splice(i, 1);\n        }\n        setSelectedAnimes(animes);\n    };\n    \n    const fetchCharacterData = async () => {\n        setIsLoading(true);\n        if (malId) {\n            const response = await fetch(`https://api.jikan.moe/v3/character/${malId}`);\n            const character = await response.json();\n            setCharacter(character);\n            setPicture(character.image_url);\n        }\n        setIsLoading(false);\n    }\n\n    useEffect(() => {\n        fetchCharacterData();\n    }, []);\n\n    useEffect(() => {\n        if (baseOverallPower) {\n            saveCard();\n        }\n    }, [baseOverallPower]);\n\n    useEffect(() => {\n        let newOverallPower = 0;\n        if (rarity.value === 1) {\n            newOverallPower = baseOverallPower\n        } else if (rarity.value === 2) {\n            newOverallPower = baseOverallPower + 1\n        } else if (rarity.value === 3) {\n            newOverallPower = baseOverallPower + 3\n        } else if (rarity.value === 4) {\n            newOverallPower = baseOverallPower + 5\n        };\n        setOverallPower(newOverallPower);\n    }, [rarity, baseOverallPower]);\n \n    const generateOverallPower = async () => {\n        if (Object.keys(selectedDomain).length === 0 || Object.keys(selectedClass).length === 0) {\n            setAlert({\n                show: true,\n                message: 'Select class and domain for this character'\n            });\n            return () => {};\n        }\n        if (character.animeography.length > 5 && selectedAnimes.length === 0) {\n            setAlert({\n                show: true,\n                message: 'This character has many animes, select some from the list'\n            });\n            return () => {};\n        }\n        setIsLoading(true);\n        if (malId) {\n            const reqOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    animes: selectedAnimes.map(a => a.mal_id) \n                })\n            };\n            try {\n                const res = await fetch(`${process.env.REACT_APP_SAKATA_API_URL}/basecards/overall-power/${malId}`, reqOptions);\n                const data = await res.json();\n                setBaseOverallPower(data.overall_power);\n            } catch (err) {\n                setAlert({\n                    show: true,\n                    message: `Could not save card: ${err}`\n                });\n            }\n        }\n        setIsLoading(false);\n    }\n\n    const saveCard = async () => {\n        const reqOptions = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: character.name,\n                class: parseInt(selectedClass.value, 10),\n                domain: parseInt(selectedDomain.value, 10),\n                mal_id: parseInt(malId),\n                overall_power: baseOverallPower\n            })\n        };\n        console.log(reqOptions.body);\n        return await fetch(`${process.env.REACT_APP_SAKATA_API_URL}/basecards`, reqOptions);\n    }\n\n    const generateJpegCard = () => {\n        HtmlToImage.toJpeg(sakataCardRef.current, { quality: 0.95 })\n            .then(async (dataUrl) => {\n                const filename = `sakata_${character.mal_id}_${rarity.value}.jpeg`;\n                const base64Response = await fetch(dataUrl);\n                const blob = await base64Response.blob();\n                const formData = new FormData();\n                formData.append(\"basecard\", blob, filename);\n                fetch(`${process.env.REACT_APP_SAKATA_API_URL}/basecards/image`, {\n                  method: 'POST',\n                  body: formData\n                });\n                download(dataUrl, filename);\n            })\n    }\n\n    return (\n        <AddBaseCardContext.Provider\n            value={{\n                isLoading,\n                character,\n                overallPower,\n                picture,\n                handlePicture,\n                rarity,\n                handleRarity,\n                classes,\n                selectedClass,\n                handleClass,\n                domains,\n                selectedDomain,\n                handleDomain,\n                selectAnime,\n                selectedAnimes,\n                generateOverallPower,\n                alert,\n                setAlert,\n                sakataCardRef,\n                generateJpegCard,\n            }}\n        >\n            {component.children}\n        </AddBaseCardContext.Provider>\n    )\n}\n\nexport { AddBaseCardContext, AddBaseCardProvider };\n","/home/bruno/IdeaProjects/sakata-app/src/components/AnimeCharacters.js",[],"/home/bruno/IdeaProjects/sakata-app/src/contexts/AnimeCharactersContext.js",[],"/home/bruno/IdeaProjects/sakata-app/src/contexts/SearchAnimeContext.js",[],"/home/bruno/IdeaProjects/sakata-app/src/components/SearchAnime.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":127,"column":45,"nodeType":"58","endLine":127,"endColumn":108},{"ruleId":"56","severity":1,"message":"57","line":128,"column":45,"nodeType":"58","endLine":128,"endColumn":110},{"ruleId":"59","severity":1,"message":"60","line":181,"column":8,"nodeType":"61","endLine":181,"endColumn":10,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":187,"column":8,"nodeType":"61","endLine":187,"endColumn":26,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCharacterData'. Either include it or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has a missing dependency: 'saveCard'. Either include it or remove the dependency array.",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [fetchCharacterData]",{"range":"73","text":"74"},"Update the dependencies array to be: [baseOverallPower, saveCard]",{"range":"75","text":"76"},[6913,6915],"[fetchCharacterData]",[7014,7032],"[baseOverallPower, saveCard]"]